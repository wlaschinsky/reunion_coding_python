# TOPIC: Z√ÅKLADY PYTHONU

print("Hello!")
# viceradkovy print
print("""
Hello! 
neco.
""")
print(2**2)
# deleni s float
print(4/2)
# deleni bez float
print(4//2)
# prace se stringem - escapovani specialnich znaku jako "" a rozdeleni na vice radku 
print("I'm happy\n, said \"Why are you happy?\" ")
# overeni datoveho typu
print(type(210))
# pretypovani hodnoty
print(2 + float("2"))

# TOPIC: INDEXOV√ÅN√ç
# - slicing
# - striding
# - z√°porn√© indexy

# zezadu -1, -2, -3... zaƒç√°tek = posledn√≠ znak, konec = prvn√≠ znak
# zepredu 0, 1, 2... zaƒç√°tek = prvn√≠ znak, konec = posledn√≠ znak

text = "Python"
print(text[0])    # P
print(text[-1])   # n
print(text[-3])   # h


var = "Petr"
var_num = len(var)
for i in range(var_num):
    print(var[i])

# TOPIC: SLICING, STRIDING
# [start:end]  slicing (√∫sek)
# [start:end:step] striding (√∫sek + krokov√°n√≠)
# [::-1] obr√°cen√≠ cel√©ho ≈ôetƒõzce
# Striding = krokov√°n√≠ v r√°mci slicingu

# +-------------------+-----------------------------+
# | Co je t≈ôeba       | Kdy funguje                 |
# +-------------------+-----------------------------+
# | Kladn√Ω krok (+1)  | pouze kdy≈æ start < end      |
# | Z√°porn√Ω krok (-1) | pouze kdy≈æ start > end      |
# +-------------------+-----------------------------+

# +---------------------+------------+---------------------------------------------+
# | Z√°pis               | Funguje?   | Co dƒõl√°                                     |
# +---------------------+------------+---------------------------------------------+
# | text[2:5]           | Ano        | Vyp√≠≈°e znaky s indexy 2,3,4                 |
# | text[5:2]           | Ne         | Smƒõr neodpov√≠d√° (step defaultnƒõ +1)        |
# | text[5:2:-1]        | Ano        | Vyp√≠≈°e znaky s indexy 5,4,3                 |
# | text[2:5:-1]        | Ne         | Smƒõr neodpov√≠d√° (step -1, ale start < end) |
# | text[::-1]          | Ano        | Cel√Ω text pozp√°tku                          |
# | text[::2]           | Ano        | Ka≈æd√Ω druh√Ω znak zleva                     |
# | text[::-3]          | Ano        | Ka≈æd√Ω t≈ôet√≠ znak zprava                    |
# +---------------------+------------+---------------------------------------------+

soubor = "report.txt"
nazev = soubor[:-4]
print(nazev)  # "report"

# fcnejsi ekvivalent
soubor = "report.txt"
pozice_tecÃåky = soubor.rfind(".")  # najdu index posledn√≠ teƒçky
nazev = soubor[:pozice_tecÃåky]     # vezmu od zaƒç√°tku po teƒçku (ne vƒçetnƒõ)
print(nazev)  # "report"

# z√≠sk√°n√≠ p≈ô√≠pony teƒçka 
soubor = "report.txt"
pozice_tecÃåky = soubor.rfind(".")
if pozice_tecÃåky != -1:
    pripona = soubor[pozice_tecÃåky+1:]  # vezmu a≈æ za teƒçkou
else:
    pripona = ""
print(pripona)  # "txt"


# EXERCISES: ULOHA: Pomoc√≠ operac√≠ nad ≈ôetƒõzcem a spojov√°n√≠ ≈ôetƒõzc≈Ø vypi≈°te dan√Ω ≈ôetƒõzec nejd≈ô√≠ve norm√°lnƒõ, pot√© pozp√°tku, pot√© ka≈æd√Ω t≈ôet√≠ znak a pot√© posledn√≠ t≈ôi znaky. Vlo≈æte mezi segmenty nƒõjak√Ω oddƒõlovaƒç. Bude to nap≈ô√≠klad takto:
var = "Samuel Wlaschinsky"
print(var)
print(var[::-1])
print(var[::3])
print(var[-3:])  # posledn√≠ 3 znaky

# EXERCISES: Vypi≈° prvn√≠ t≈ôi znaky ≈ôetƒõzce
var_text = "Python"
print(var_text[:3])  # nebo var_text[0:3]

# EXERCISES: Vypi≈° ≈ôetƒõzec pozp√°tku, Pou≈æij striding a vypi≈° text √∫plnƒõ pozp√°tku.text = "Python", vypi≈° prvn√≠ t≈ôi znaky

text = "Python"
print(text[0:2])   # nebo text[:2] 

# EXERCISES: Vypi≈° ka≈æd√Ω druh√Ω znak od zaƒç√°tku, Z ≈ôetƒõzce "abcdefghij" vypi≈° ka≈æd√Ω druh√Ω znak.
var_text = "abcdefghij"
print(var_text[::2])  # nebo var_text[0:len(var_text):2]

# EXERCISES: Vypi≈° posledn√≠ch pƒõt znak≈Ø, Z ≈ôetƒõzce "Automobilismus" vypi≈° posledn√≠ch 5 znak≈Ø.
var_text = "Automobilismus"
print(var_text[-5:])

# EXERCISES: Vypi≈° v≈°echny znaky mezi indexem 2 a 8, Z ≈ôetƒõzce "Ban√°novn√≠k" vypi≈° znaky od indexu 2 do indexu 7.
var_text = "Ban√°novn√≠k"
print(var_text[2:8])  # nebo var_text[2:7] (index 8 nen√≠ zahrnut)

# EXERCISES: Vypi≈° ka≈æd√Ω t≈ôet√≠ znak od konce - Vezmi ≈ôetƒõzec "abcdefghijklmno" a vypi≈° ka≈æd√Ω t≈ôet√≠ znak, zaƒç√≠naje od konce. Tip: Striding s krokem -3, tedy [:: -3], ale mus√≠≈° zaƒç√≠t spr√°vnƒõ od konce.
var_text = "abcdefghijklmno"
print(var_text[::-3])  # nebo var_text[-1::-3] (zaƒç√≠n√° od posledn√≠ho znaku a jde pozp√°tku)

# EXERCISES: O≈ô√≠zni ≈ôetƒõzec do poloviny - Z ≈ôetƒõzce "Programov√°n√≠" vytvo≈ô nov√Ω ≈ôetƒõzec, kter√Ω obsahuje jen prvn√≠ polovinu p√≠smen. poƒç√≠t√°≈° d√©lku pomoc√≠ len(). Vezme≈° [ : len(text)//2 ].

# EXERCISES: Najdi a oddƒõl p≈ô√≠ponu souboru - soubor = "dokumentace_finalni_verze.docx", N√°zev souboru (bez p≈ô√≠pony), P≈ô√≠ponu (docx)
file = "dokumentace_finalni_verze.docx"
print(file[:-5])  # N√°zev souboru bez p≈ô√≠pony

# EXERCISES: Vytvo≈ô ≈°ifru - "geheimnis" a vytvo≈ô nov√Ω ≈ôetƒõzec, kter√Ω obsahuje ka≈æd√Ω druh√Ω znak pozp√°tku.
text = "geheimnis"
print(text[::-2])  # nebo text[-1::-2] (zaƒç√≠n√° od posledn√≠ho znaku a jde pozp√°tku)  

# EXERCISES: Z√≠sk√°≈° posledn√≠ ƒçty≈ôi znaky ≈ôetƒõzce ‚Äûprototypov√°n√≠‚Äú bez pou≈æit√≠ -4: (pou≈æij len())
var = "mikrotelefon"
print(var[len(var)//2:])

# EXERCISES: Z textu ‚ÄûEngetoPythonKurs‚Äú vytvo≈ô nov√Ω text, kter√Ω je pozp√°tku a obsahuje pouze ka≈æd√© t≈ôet√≠ p√≠smeno
text = "EngetoPythonKurs"
print(text[::-3])  # zaƒç√≠n√°me od konce, krok -3

# EXERCISES: 
# +-------------+------------------+
# | Z√°pis       | V√Ωsledek         |
# +-------------+------------------+
# | city[::2]   | ['Plzen', 'Louny'] |
# | city[1::2]  | ['Brno']         |
# | city[::-1]  | ['Louny', 'Brno', 'Plzen']  ‚Üê obr√°cenƒõ
# +-------------+------------------+

city = ["Plzen", "Brno", "Louny"]
# indexy:     0        1        2
print(city[::2])
# puvodne jsem spatne vychazel z toho, ze vysledek bude Brno. Ale uz prvni hodnota se pocita takze druhou to preskocvi a treti berem, protoze je to druha od te prvni, takze vysledek je Plzen a Louny

print(city[1::2])  # Zaƒçni na indexu 1 a jdi po dvou
# V√Ωstup: ['Brno']


# EXERCISES: Vypi≈° mƒõsta pozp√°tku v tuple
meals = ("hranolky", "hambac", "smazak")
print(meals[::-3])
# indexy:     0           1         2
#             ^           ^         ^
#             0           1         2
print(meals[::-3])  # vezme index 2 ("smazak"), pak 2-3 = -1 ‚Üí konec
# v√Ωstup: ('smazak',)
# üìå Tj. -3 znamen√°: p≈ôeskoƒç 2 prvky dozadu ‚Üí ale tuple u≈æ ≈æ√°dn√© dal≈°√≠ nem√° ‚Üí v√Ωstup obsahuje jen posledn√≠ prvek.
